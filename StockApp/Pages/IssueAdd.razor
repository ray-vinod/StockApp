@page "/issue"
@page "/issue/{id:guid}"
@*@attribute [Authorize(Roles = "Root")]*@

<CardComponent Heading="Issue Item">
    <EditForm Model="frmModel" OnValidSubmit="AddEdit">
        <div class="form-row align-items-center">
            <div class="form-group col-md-4">
                <label class="control-label">Item's Name</label>
                <SearchBoxMadeSelection SelectedProdecutChanged="ChangeHandler"
                                        SelectedProduct="frmModel.SelectedProduct" />
            </div>
            <div class="form-group col-md-1">
                <label class="form-label">Quantity</label>
                <InputNumber @bind-Value="frmModel.Qty" class="form-control" />
            </div>
            <div class="form-group col-md-1">
                <label class="form-label">Ava Qty</label><br />
                <InputNumber @bind-Value="frmModel.AvQty" class="form-control" />
            </div>
            <div class="form-group col-md-2">
                <label class="form-label">Recieve Date</label>
                <InputDate @bind-Value="frmModel.IssueDate" class="form-control" />
            </div>
            <div class="form-group col-md-2">
                <label class="form-label">Remarks</label>
                <InputText @bind-Value="frmModel.Remarks" class="form-control" />
            </div>
            <div class="col-md-2 mt-3">
                <AddEditButtonComponent ItemGuiId="frmModel.Id" />
            </div>
            <div class="col-12">
                <ValidationSummary />
            </div>
        </div>
    </EditForm>
</CardComponent>

<IssueList IsVisible="false" PageSize="10" EditItem="EditItemHandler" />

@code{

    private List<Recieve> recieves;
    //private List<Product> products;
    public IssueViewModel frmModel = new IssueViewModel();

    [Inject] private AppDbContext AppContext { get; set; }
    [Inject] AlertService AlertService { get; set; }
    [Inject] IssueListPageRefreshService IssueListRefresh { get; set; }
    [Inject] NavigationManager PageNavigation { get; set; }
    [Parameter] public Guid Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        recieves = new List<Recieve>();

        if (Id != Guid.Empty)
        {
            await EditItemHandler(Id);
        }
    }


    private async Task AddEdit()
    {

        var ip = new Issue();

        if (frmModel.Id == Guid.Empty)
        {
            ip.ProductId = frmModel.SelectedProduct.Id;
            ip.IssueDate = frmModel.IssueDate;
            ip.Qty = frmModel.Qty;
            ip.Remarks = frmModel.Remarks;
            ip.IssuedBy = "Vinod";

            AppContext.Entry(ip).State = EntityState.Detached;

            AppContext.IssueProducts.Add(ip);
            await AppContext.SaveChangesAsync();

            UpdateRecieveProductForIsUsed(ip.ProductId, frmModel.Qty);

            //AppContext.Entry(recieves).State = EntityState.Detached;

            AppContext.RecieveProducts.UpdateRange(recieves);
            await AppContext.SaveChangesAsync();

            AlertService.AddMessage(new Alert(frmModel.SelectedProduct.Name + " is issued !", AlertType.Info), 5);

            frmModel = new IssueViewModel();
            await ManageStock.UpdateStock(ip.ProductId, AppContext);
            IssueListRefresh.CallRefreshPage();
        }
        else
        {
            ip = AppContext.IssueProducts.Where(x => x.Id == frmModel.Id)
                          .AsNoTracking()
                          .FirstOrDefault();
            ip.Qty = frmModel.Qty;
            ip.IssueDate = frmModel.IssueDate;
            ip.Remarks = frmModel.Remarks;
            ip.IssuedBy = "vinod";
            AppContext.IssueProducts.Update(ip);
            await AppContext.SaveChangesAsync();

            UpdateRecieveProductForIsUsed(ip.ProductId, frmModel.Qty);

            //AppContext.Entry(recieves).State = EntityState.Detached;

            AppContext.RecieveProducts.UpdateRange(recieves);

            await AppContext.SaveChangesAsync();
            AlertService.AddMessage(new Alert(frmModel.SelectedProduct.Name + " is updated !", AlertType.Info), 5);

            frmModel = new IssueViewModel();
            await ManageStock.UpdateStock(ip.ProductId, AppContext);
            IssueListRefresh.CallRefreshPage();
        }

        //frmModel = new IssueViewModel();
        //await ManageStock.UpdateStock(ip.ProductId, AppContext);
        //IssueListRefresh.CallRefreshPage();

    }

    private void ChangeHandler(Product product)
    {
        if (product == null)
        {
            frmModel = new IssueViewModel();
            return;
        }

        var stockProduct = AppContext.StockProducts.AsNoTracking().FirstOrDefault(x => x.Id == product.Id);

        if (stockProduct == null)
        {
            frmModel = new IssueViewModel();
            AlertService.AddMessage(new Alert("Item not found in stock!", AlertType.Warning), 5);
            return;
        }

        frmModel.AvQty = stockProduct.InStock;
        this.frmModel.SelectedProduct = product;

        //StateHasChanged();
        if (frmModel.AvQty == 0)
        {
            AlertService.AddMessage(new Alert("Item not available in stock!", AlertType.Warning), 5);
            return;
        }

    }

    //Edit Issue List
    private async Task EditItemHandler(Guid id)
    {
        if (id == Guid.Empty)
        {
            AlertService.AddMessage(new Alert("Your not selected any item !", AlertType.Error), 5);
            return;
        }

        frmModel = await AppContext.IssueProducts.AsNoTracking()
                          .Where(x => x.Id == id && x.IsDeleted != true)
                          .Select(x => new IssueViewModel
                          {
                              Id = x.Id,
                              SelectedProduct = x.Product,
                              Qty = x.Qty,
                              IssueDate = x.IssueDate,
                              Remarks = x.Remarks,
                              PId = x.ProductId
                          }).FirstOrDefaultAsync();

        var qty = await AppContext.StockProducts.AsNoTracking().FirstOrDefaultAsync(x => x.Id == frmModel.PId);

        if (qty.InStock != 0)
        {
            frmModel.AvQty = qty.InStock;
        }

        if (frmModel == null)
        {
            AlertService.AddMessage(new Alert("Itme not found !", AlertType.Error), 5);
            return;
        }
        PageNavigation.NavigateTo("/issue", false); //only for the visible url management after the form set
    }


    private void UpdateRecieveProductForIsUsed(Guid pid, int q)
    {
        int rcount;
        int rQty = q;

        //Count all from recieveproduct table
        var qtys = AppContext.RecieveProducts
                             .AsNoTracking()
                             .Where(x => x.ProductId == pid && x.IsDeleted == false && x.IsUsed == false)
                             .OrderBy(x => x.ExpDate);


        //for the FIFO
        foreach (var qty in qtys)
        {
            if (rQty != 0)
            {
                if (qty.UpdatedQty != 0)
                    rcount = qty.UpdatedQty;
                else
                    rcount = qty.Qty;

                if (rcount >= rQty)
                {
                    rcount -= rQty;
                    if (rcount == 0)
                        qty.IsUsed = true;
                    else
                        qty.UpdatedQty += rQty;
                    rQty = 0;
                }
                else
                {
                    //int 2 = 5-3;
                    rQty -= rcount;
                    qty.IsUsed = true;
                }

                AppContext.Entry(qty).State = EntityState.Detached;

                recieves.Add(qty);
            }
        }
    }






}
